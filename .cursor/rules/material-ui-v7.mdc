---
alwaysApply: true
description: Strict Material‑UI v7 UI policy; MUI‑only, tree‑shaking imports, icons, theming, MCP.
---

# Material‑UI v7 UI Policy (REQUIRED)

These rules apply to all React/TypeScript files in this project. The Cursor Agent must strictly follow them when building the UI.

## Version and documentation

- This project uses Material‑UI v7. Reference: [Upgrade to v7](https://mui.com/material-ui/migration/upgrade-to-v7/).
- Use the MUI MCP Server whenever help is needed: [Getting started with MCP](https://mui.com/material-ui/getting-started/mcp/).

## UI library usage

- The entire UI (components, icons, theme, spacing, typography, etc.) must use Material‑UI only.
- Do not add or use any third‑party UI libraries.

## Imports (Tree‑shaking) — Required

- Always import specific components/icons to optimize bundle size. Correct examples:

```tsx
import Stack from '@mui/material/Stack'
import Button from '@mui/material/Button'
import DeleteIcon from '@mui/icons-material/Delete'
import AlarmIcon from '@mui/icons-material/Alarm'
```

- Do not use deep imports beyond one level (wrong: `@mui/material/styles/createTheme`).
- Do not use modern/esm aliases removed in v7 (e.g., `@mui/material/modern`), or Vite aliases that force ESM for icons.
- Import theming APIs only from `@mui/material/styles`, e.g.:

```tsx
import { ThemeProvider, createTheme } from '@mui/material/styles'
```

## Icon rules

- Prefer icons from `@mui/icons-material`.
- Only if no suitable icon exists, create a custom icon using `SvgIcon` and ensure it inherits MUI color/size/theme props:

```tsx
import SvgIcon from '@mui/material/SvgIcon'

function CustomIcon(props) {
  return (
    <SvgIcon {...props} viewBox='0 0 24 24'>
      <path d='M...' />
    </SvgIcon>
  )
}
```

## Theming and styling

- Standardize theming via Material‑UI: use `ThemeProvider`, `createTheme`, `sx`, `styled`, `useTheme`, and system props.
- Prefer the `sx` prop for all component‑level styling. Use `styled` only to create global, reusable components shared across multiple pages/routes. This keeps the codebase consistent, maintainable, and leverages MUI optimizations.
- Do not use `experimentalStyled` (removed in v7). Use `styled` from `@mui/material/styles`.
- When multiple color schemes are enabled, prefer CSS variables via `theme.vars.*`. If runtime light/dark calculations are needed, apply `theme.applyStyles` accordingly.
- Import `StyledEngineProvider` from `@mui/material/styles` (do not import from `@mui/material`).

## Dark mode handling and SSR flicker (REQUIRED)

- This app previously experienced "dark mode flicker" on SSR. Follow MUI's official guidance to prevent it: use CSS variables and the initialization script. References: https://mui.com/material-ui/customization/dark-mode/#dark-mode-flicker and https://mui.com/material-ui/customization/css-theme-variables/configuration/#preventing-ssr-flickering
- Do not check `theme.palette.mode` to branch styles or logic. Avoid patterns like `theme.palette.mode === 'dark'` or ternaries based on `theme.palette.mode`.
- Required: Use `theme.applyStyles()` to target specific modes. Prefer CSS variables via `colorSchemes` and initialize mode on the server to avoid flicker. Reference: https://mui.com/material-ui/customization/dark-mode/#styling-in-dark-mode

### Allowed patterns

```tsx
import Box from '@mui/material/Box'
import { styled } from '@mui/material/styles'

// Using styled
const Panel = styled('div')(({ theme }) => [
  { backgroundColor: theme.palette.background.paper },
  theme.applyStyles('dark', {
    backgroundColor: theme.palette.grey[900]
  })
])

// Using sx
function Example() {
  return (
    <Box
      sx={[
        (theme) => ({ color: theme.palette.text.primary }),
        (theme) =>
          theme.applyStyles('dark', {
            color: theme.palette.secondary.main
          })
      ]}
    />
  )
}
```

### Disallowed patterns (must migrate)

```tsx
// Any direct mode checks are disallowed
const color = theme.palette.mode === 'dark' ? '#fff' : '#000'
const styles = {
  backgroundColor: theme.palette.mode === 'dark' ? '#121212' : '#ffffff'
}
```

### SSR anti-flicker basics

```tsx
import { InitColorSchemeScript, ThemeProvider, createTheme } from '@mui/material/styles'

const theme = createTheme({
  colorSchemes: {
    dark: true // enable built-in dark scheme
  }
})

// In your document/root HTML
// <InitColorSchemeScript defaultMode="system" />

// In your app
// <ThemeProvider theme={theme} defaultMode="system" disableTransitionOnChange>
```

- Enforcement: If any code uses `theme.palette.mode` (e.g., equality checks, ternaries, or logical branching), raise a warning and propose a concrete refactor using `theme.applyStyles()` as shown above.

## React 18 and below compatibility

- If the project uses React 18 or below, align `react-is` with the React version to avoid runtime issues (see the v7 guide).

## Mandatory MCP usage for MUI issues

- For any MUI‑related question, migration, API uncertainty, or error, proactively use the MUI MCP Server to search, debug, or resolve before asking the user.

## Do / Don’t checklist

- Do: Tree‑shake imports from `@mui/material/<Component>` and `@mui/icons-material/<Icon>`.
- Do: Use `@mui/material/styles` for theming and type augmentation.
- Don’t: Deep import nested paths within MUI packages.
- Don’t: Add or use any non‑MUI UI libraries.
- Don’t: Import `StyledEngineProvider` from `@mui/material`.

## Grid — Material‑UI v7 (current API)

- Import the stable component:

```tsx
import Grid from '@mui/material/Grid'
```

- Key changes in v7:
  - The sizing props `xs`/`sm`/`md`/`lg`/`xl` were replaced by a single `size` prop.
  - The `item` prop is no longer used. A `Grid` is always an item; use `container` to turn it into a container.
  - Use `spacing`, `rowSpacing`, and `columnSpacing` for gaps; use `columns` to change the 12‑column default; use `offset` to push items.
  - Prefer `Stack` inside a `Grid` for vertical stacking; `direction="column"` on `Grid` is not supported.

- Basic usage:

```tsx
<Grid container spacing={2}>
  <Grid size={{ xs: 12, sm: 6, md: 3 }}>
    {/* Item A */}
  </Grid>
  <Grid size={{ xs: 12, sm: 6, md: 3 }}>
    {/* Item B */}
  </Grid>
  <Grid size={{ xs: 12, sm: 6, md: 3 }}>
    {/* Item C */}
  </Grid>
  <Grid size={{ xs: 12, sm: 6, md: 3 }}>
    {/* Item D */}
  </Grid>
  {/* Nested grids are allowed */}
  <Grid container size={12} rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>
    <Grid size={6}>{/* Nested 1 */}</Grid>
    <Grid size={6}>{/* Nested 2 */}</Grid>
  </Grid>
```

- Columns and offset:

```tsx
<Grid container spacing={2} columns={16}>
  <Grid size={8}>{/* 8/16 */}</Grid>
  <Grid size={8}>{/* 8/16 */}</Grid>
</Grid>

<Grid container spacing={3}>
  <Grid size={{ xs: 6, md: 2 }} offset={{ xs: 3, md: 0 }} />
  <Grid size={{ xs: 4, md: 2 }} offset={{ md: 'auto' }} />
</Grid>
```

- Migration from pre‑v7:

```tsx
// Before (v5/v6 style)
<Grid container spacing={2}>
  <Grid item xs={12} md={6}>...</Grid>
</Grid>

// After (v7)
<Grid container spacing={2}>
  <Grid size={{ xs: 12, md: 6 }}>...</Grid>
</Grid>
```

- Docs: see MUI Grid v7 usage and API at https://mui.com/material-ui/react-grid/

---

References:

- MUI v7 Upgrade Guide: https://mui.com/material-ui/migration/upgrade-to-v7/
- MUI MCP Server: https://mui.com/material-ui/getting-started/mcp/
